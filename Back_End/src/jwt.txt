import express from 'express';
import session from 'express-session';
import bodyParser from 'body-parser';

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Configuración de sesiones
app.use(session({
  secret: 'mi_secreto', // Cambia esto por un secreto seguro
  resave: false,
  saveUninitialized: false,
  cookie: { secure: false } // Cambia a true si usas HTTPS
}));

// Simulación de inicio de sesión
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // Aquí deberías verificar el usuario y la contraseña
  if (username === 'admin' && password === 'password') { // Ejemplo
    req.session.user = { username }; // Guardar información de usuario en la sesión
    return res.json({ message: 'Inicio de sesión exitoso' });
  }

  return res.status(401).json({ message: 'Credenciales inválidas' });
});

// Middleware de autenticación
const isAuthenticated = (req, res, next) => {
  if (req.session.user) {
    return next(); // El usuario está autenticado
  }
  return res.status(403).json({ message: 'No estás autorizado a realizar esta acción' });
};

// Ruta para crear eventos
app.post('/eventos', isAuthenticated, (req, res) => {
  const { nombreEvento, fechaEvento } = req.body;
  // Aquí agregarías la lógica para crear un nuevo evento en la base de datos

  return res.json({ message: 'Evento creado exitosamente', evento: { nombreEvento, fechaEvento } });
});

// Iniciar el servidor
app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});
